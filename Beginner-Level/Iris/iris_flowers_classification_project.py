# -*- coding: utf-8 -*-
"""IRIS_FLOWERS_CLASSIFICATION_PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/DevlinaPal/LGMVIP-DataScience/blob/main/Beginner-level/IRIS%20FLOWERS%20CLASSIFICATION%20USING%20ML/IRIS_FLOWERS_CLASSIFICATION_PROJECT.ipynb

NAME- RAJ KAMAL SHAKYA

LGM-VIP INTERNSHIP

 BEGINNER LEVEL TASK -1

Iris Flowers Classification ML Project

1. IMPORT LIBRARY
"""

import pandas as pd
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score

"""2. LOAD DATA"""

data=pd.read_csv("iris.csv")

"""3. UNDERSTANDING THE DATA INFO"""

data.info()

data. describe()

data.head()

data.tail()

"""4. DATA PREPROCESSING"""

data=data.replace(to_replace={'class':{'Iris-setosa':0,'Iris-versicolor':1,'Iris-virginica':2}})
data.head()     #label encode

#change data tpe of class attribut to catgoicak

data['class'] = data['class'].astype('category').cat.codes

5. EXPLANTORY DATA ANALYSIS

sns.countplot(y=data['class'],data=data)
plt.ylabel('target classes')
plt.xlabel('count of each Target class')
plt.show()

#check the destibution of all featues
data.hist(bins=15)
plt.title('Featue distibution')
plt.show()

sns.heatmap(data.corr(),annot=True,cmap='RdYlGn',center=0)

"""6. MODEL BUILDING"""

# shuffling the DataFrame rows
data = data.sample(frac = 1)
data. head()

x = data.drop(['class'], axis =1)
y = data['class']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 0)

sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.fit_transform(x_test)

"""a. LOGISTIC REGRESSION"""

#Creating an instance and fit the model
reg = LogisticRegression(multi_class='multinomial',solver='lbfgs')

#Fitting the train and test data
reg.fit(x_train, y_train)

y_pred = reg.predict(x_test)
y_proba = reg.predict_proba(x_test)
y_pred

score_lr= reg.score(x_test,y_test)
print(score_lr)

actual=y_test
predicted=y_pred
results=confusion_matrix(actual,predicted)
print('confusion matrix')
print(results)

"""b. SVM"""

clf = SVC(kernel='linear', C=1.0, random_state=0)
clf.fit(x_train, y_train)

# generate evaluation metrics
print ("Train - Accuracy :", accuracy_score(y_train, clf.predict(x_train)))
print ("Train - Confusion matrix :\n",confusion_matrix(y_train, clf.
predict(x_train)))

#print ("Train - classification report :", classification_report
#(y_train, clf.predict(x_train)))
print ("Test - Accuracy :", accuracy_score(y_test, clf.predict
(x_test)))
print ("Test - Confusion matrix :\n",confusion_matrix(y_test, clf.
predict(x_test)))

"""PREDICTION ON GIVEN INPUT"""

num=[[6.4,2.9,4.3,1.3]]
num

num=sc.fit_transform(num)

u=clf.predict(num)
u[0]

rslt = reg.predict(num)
rslt[0]